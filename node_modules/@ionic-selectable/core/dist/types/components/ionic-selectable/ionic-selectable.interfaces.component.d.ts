export declare abstract class IonicSelectableEvent<TItem> {
  /**
   * Value.
   */
  readonly value: TItem | TItem[] | string | undefined | null;
  /**
   * Component.
   */
  readonly component: HTMLIonicSelectableElement;
  constructor(value: TItem | TItem[] | string | undefined | null, component: HTMLIonicSelectableElement);
}
export declare class IonicSelectableInfiniteScrolledEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableSearchingEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableSearchFailedEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableSearchSuccessedEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableItemAddingEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableClearedEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableChangedEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableItemsChangedEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableSelectedEvent<TItem> extends IonicSelectableEvent<TItem> {
  /**
   * If event is selected.
   */
  readonly isSelected?: boolean;
  constructor(value: TItem | TItem[] | string | undefined | null, isSelected: boolean, component: HTMLIonicSelectableElement);
}
export declare class IonicSelectableClosedEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableOpenedEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableFocusedEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare class IonicSelectableBlurredEvent<TItem> extends IonicSelectableEvent<TItem> {
}
export declare type TemplateType = 'addItem' | 'closeButton' | 'footer' | 'group' | 'groupEnd' | 'header' | 'icon' | 'item' | 'itemEnd' | 'itemIcon' | 'message' | 'placeholder' | 'searchFail' | 'title' | 'value';
export interface ITemplate {
  type: TemplateType;
  value?: any[] | any | string | undefined | null;
  isItemSelected?: boolean | undefined | null;
  isItemDisabled?: boolean | undefined | null;
  isAdd?: boolean | undefined | null;
}
export declare type TemplateRenderFn = (element: HTMLElement | undefined | null, template: ITemplate) => void;
export declare type HasTemplateRenderFn = (type: TemplateType) => boolean;
